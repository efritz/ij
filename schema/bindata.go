// Code generated by go-bindata.
// sources:
// asset.go
// config.yaml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xce\x48\xcd\x4d\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\x26\x1f\xf5\x4c\x37\x00\x00\x00")

func assetGoBytes() ([]byte, error) {
	return bindataRead(
		_assetGo,
		"asset.go",
	)
}

func assetGo() (*asset, error) {
	bytes, err := assetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset.go", size: 55, mode: os.FileMode(420), modTime: time.Unix(1534806267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xcd\x92\xa2\x30\x10\xbe\xf3\x14\xa9\xda\xad\xf2\x44\xcd\xdd\xf3\xde\xdd\xc3\xdc\xad\x18\x1a\xc9\x9a\x1f\xb6\x13\xdc\xf1\xed\x37\x41\x11\x10\xc4\x10\x75\xc6\x1a\x4e\x12\xfa\x2f\x5f\x77\x7f\xe9\x98\xa6\x69\x92\x64\x90\x73\xc5\x2d\xd7\xca\x2c\x13\x42\x40\xed\x39\x6a\x25\x41\x59\xff\x4a\x48\x06\x86\x21\x2f\xbd\xc0\x92\xbc\xaf\x7e\xad\xea\x55\x7b\x28\x61\x49\x28\x22\x3d\xd4\xef\xdc\x82\x34\x47\x85\xe6\xa3\xb1\xc8\xd5\x36\x71\x6b\x96\x9a\xdd\x94\x31\xad\x60\x95\x37\xca\x29\xf9\x89\x90\x2f\xc9\xe2\xc7\x5b\x27\xb4\x37\xac\xd4\xbb\x33\xb3\x98\x96\xda\x54\x5c\x64\x01\x72\x65\x65\x8a\x00\x31\x04\xa9\xf7\x70\x14\x74\x92\xa7\x18\x6e\xe3\xa2\x37\x7f\x80\xd9\x7a\xa1\x44\x5d\x02\x5a\x0e\x7d\x74\x4e\xbf\xaf\x99\x19\xa0\xd8\x2c\x82\xaa\x64\xab\xec\x03\x77\x41\x9d\xde\xe1\xc3\x82\xca\x4c\xa4\x6d\x2e\xe9\x36\x36\x2e\xa6\xa5\xa4\x2a\x8b\xd4\x36\x05\x08\x11\xab\x5b\x8b\x46\x2a\xbb\x1a\xc7\x43\xa9\xb9\x8a\x35\x50\x19\xc0\x48\xd5\x7f\x1a\x77\xa6\xa4\x2c\x16\xf2\x42\x1b\xab\xa8\x8c\x55\xcf\xc0\x52\x56\x84\x2b\x6f\xb4\x16\x40\x9b\x4a\x2b\x80\x0a\x5b\xb0\x02\xd8\xae\x35\x31\xda\x41\x1d\xc9\xc5\x19\xf5\x0b\x86\xb9\xaa\xdc\x91\x6c\x94\x11\xfe\x56\x1c\x21\x5b\x8f\x5a\xb9\xb5\x8b\x96\xaf\xfc\xd3\xe3\xac\x2b\x38\xc1\x47\xa9\xd1\x76\xbd\xad\x73\x2e\x82\x50\xef\xb1\x9a\x7f\xd2\xf1\x96\x6e\x3f\xf4\xc3\x1b\x0d\x71\x34\x4c\x9a\x65\x35\x62\x54\xfc\x6e\xd9\x86\xe4\x54\x18\x48\xba\xa0\xb5\x14\x5b\x37\xbb\xa7\xb4\x41\x26\xa3\x69\xed\x3e\x0e\x70\x3d\x08\xb8\xa7\xb1\x34\x80\xe0\xde\x60\x06\xf5\x79\x7f\x5b\xc0\x86\x45\x2c\x75\x49\x76\x1b\xe2\x3a\x76\x03\x96\x4b\xd0\x55\x1c\x91\x4c\xe5\xcf\x09\x9c\x0f\xb5\xd7\x3a\x78\xea\xb0\x1a\x3a\xd1\x6c\x07\x18\xda\x19\x63\xf0\xd1\x6d\x50\xf6\x3e\xaf\xa9\x08\x11\x74\x03\xe2\xe5\xa2\xa2\xb8\xad\x3c\x0f\xbd\x58\x60\xf3\x39\xc8\x9b\xf0\xe5\xdd\xcc\x62\xaf\x55\xdd\x3e\xaa\xee\x64\xf4\x6d\xe0\x6e\x67\xda\xd7\x02\xfc\x18\xd7\xb7\x84\xbc\x14\x54\xdd\x09\xf6\x71\xb6\x8f\x9d\xd7\xdc\xf9\x16\x08\x67\xd0\x9c\x34\x3a\xac\xd5\x3e\x1e\x30\xe3\xdd\x38\x0c\x6b\x37\x77\x82\x79\xc7\xdc\xbc\x81\x5c\x23\xac\x3b\x51\xcc\x36\x41\x73\x37\xea\xdc\x65\xc1\xdf\xa7\x3f\x23\x9b\x6b\xdb\xb9\x22\x33\xad\x58\x85\x38\x6b\xde\xee\x57\xe1\x93\x8a\xc2\x7f\x1f\xf6\x9e\xcf\xf1\xb9\x5e\xd6\x33\xff\x81\x18\xc1\x3c\x1d\x16\x96\x7f\x86\xc5\xe5\x9f\x7e\x81\x4d\x23\x75\x25\xc7\x57\x01\x0b\x07\x2d\x04\xb8\x31\xf0\xba\x00\xf6\x36\xdd\xdf\x6c\xef\xef\x86\xa9\x5e\x3c\xef\xeb\xe2\xce\x1b\xa4\x33\xc0\x20\x64\xef\x5c\xfa\x5b\xdb\x63\x12\x3e\xef\xce\x78\xbc\x2f\x7e\x8d\x67\x26\xaa\x6c\x12\xda\x67\xb9\xee\xf0\x51\x20\x27\x8f\x96\x65\x32\x51\xdc\x0d\x13\xf9\xa3\xf4\xc9\xae\xbc\x0b\xef\x4a\x82\xa5\x8f\x75\x37\xc4\xf6\x02\xd9\xc0\x53\x60\xaa\xa9\xff\x07\x00\x00\xff\xff\x77\xfd\x50\xd7\xd4\x15\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 5588, mode: os.FileMode(420), modTime: time.Unix(1535208124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset.go": assetGo,
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset.go": &bintree{assetGo, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

