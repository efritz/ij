// Code generated by go-bindata.
// sources:
// asset.go
// config.yaml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xce\x48\xcd\x4d\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\x26\x1f\xf5\x4c\x37\x00\x00\x00")

func assetGoBytes() ([]byte, error) {
	return bindataRead(
		_assetGo,
		"asset.go",
	)
}

func assetGo() (*asset, error) {
	bytes, err := assetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset.go", size: 55, mode: os.FileMode(420), modTime: time.Unix(1535158289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x93\xa2\x30\x10\xbd\xf3\x2b\x52\xb5\x5b\xe5\xc9\x9a\xbb\xe7\xbd\xbb\x87\xb9\x53\x2d\x34\x90\x35\x24\x6c\xa7\x99\x1d\xff\xfd\x56\x50\x04\x24\x22\x44\x9d\xf1\x26\x31\xfd\xf5\xfa\xe5\x75\xb2\x5e\xaf\xa3\x28\xc5\x4c\x6a\xc9\xd2\x68\xbb\x89\x84\x40\xfd\x21\xc9\xe8\x12\x35\xbb\x4f\x21\x52\xb4\x09\xc9\xca\x6d\xd8\x88\xf7\xed\xaf\x6d\xb3\xca\x87\x0a\x37\x02\x88\xe0\xd0\x7c\x4b\xc6\xd2\x1e\x0d\xda\x3f\x2d\x93\xd4\x79\x14\x09\xc1\x60\xf7\x53\xce\x8c\xc6\x6d\xd6\x1a\xaf\xc5\x4f\xc2\x6c\x23\x56\x3f\xde\x7a\xa9\xbd\x51\xad\xdf\xc1\xee\x57\xd3\xbb\x76\xb5\x54\xe9\x71\x5f\x24\xc4\xc9\xe6\x76\x1d\x66\xf7\x07\x13\x6e\x16\x2a\x32\x15\x12\x4b\x1c\x56\x73\xfa\x7d\xcd\xcd\xa8\xea\x76\x11\x75\x5d\x76\xc6\x2e\x6f\xaa\xf5\xe9\x1b\x3f\x19\x75\x6a\x03\x7d\xcb\x12\xf2\xd0\xbc\x12\x53\x96\xa0\xd3\x40\x6b\x5b\xa0\x52\xa1\xb6\xcd\xd6\x40\x63\xd4\x4c\x87\xca\x48\x1d\xea\xa0\xb6\x48\x81\xa6\xff\x0c\xed\x6d\x05\x49\x28\xe4\x85\xb1\xac\xa1\x0c\x35\x4f\x91\x21\x29\xe6\x1b\xef\x8c\x51\x08\x2d\xd3\x0a\x04\xc5\x45\x52\x60\xb2\xef\x5c\x78\x0f\x50\x6f\xe7\xea\x8c\xfa\x85\x22\x5c\x35\xee\xed\x6c\x8d\x09\xff\xd6\x92\x30\x8d\xbd\x5e\x6e\x55\xd1\xe9\x8b\xb8\xd4\x98\x6b\x14\xf9\xac\x0c\x71\x3f\x5a\x9c\x49\x35\x0b\xf5\x81\x0a\x89\xe6\xac\x7a\x8f\x74\xf7\xc7\x30\x3d\x6f\x8a\xde\x34\x21\x4d\x1b\xc4\x40\xfd\xee\xd4\x46\x64\xa0\x2c\x46\x7d\xd0\x3a\x49\x6c\x0e\xbb\x93\xb4\xb3\xc0\xbd\x96\xa8\x35\x69\xb5\x54\x35\xc9\x1e\x69\x2e\xea\x9e\x00\x0c\xf9\x2c\x51\xfc\xba\x86\x09\xa1\x60\x87\xea\xe5\xb2\x02\xca\x6b\xc7\xf1\x17\x4b\x6c\x39\xbf\x9d\x0b\x47\xef\x91\x50\x05\x13\xfc\xbe\x11\x27\x35\x23\x7d\x40\xe8\x94\x23\x64\xea\xe5\x72\xdb\xda\xc5\xcb\x91\xda\x21\xc9\x40\x1c\x57\x48\xd2\x84\x16\xc0\xb2\x44\x53\x87\xcd\xc9\xa9\xf6\x45\x42\x54\x0a\xf4\x9d\xcd\x39\xde\x7c\x42\xa7\x99\x65\xc8\x97\x80\x7b\x63\x8a\x78\x47\x59\x13\xe3\x01\x13\xf0\x06\x96\x4d\x98\x3b\xc1\xbc\xe3\x56\xb1\xc3\xcc\x10\xc6\xbd\x2c\x16\xbb\x80\x8c\x91\xee\xf2\xe0\x5e\x07\x5f\xd1\xcd\x98\x7b\xef\x87\xc4\xe8\xa4\x26\x5a\x74\x1b\x19\xb2\xf0\x49\xa4\x10\x5e\x7d\x74\x3d\x3e\xf3\x25\x5e\xf8\x9e\xf2\x60\xbe\x1e\x13\xcb\x4f\xae\x31\xc1\xa6\x91\xba\xd2\xe3\xab\x80\xcd\x07\x6d\x0e\x70\x3e\xf0\xfa\x00\x0e\x8a\x1e\x16\x3b\x78\x8c\x4d\x9d\xc5\x73\x5d\x17\x2f\x82\x59\x36\x23\x0c\xe6\xd4\x2e\x4b\x77\xa7\x7d\x4c\xc3\x97\xdd\xa8\x8f\xb7\xe9\xef\x89\x9c\xa8\x3a\x9d\x84\xf6\x59\xa1\x7b\x7a\x34\x53\x93\xbd\xb4\x8c\x26\xc8\xdd\x2a\x91\x1b\xa5\x4f\x0e\xe5\x42\xb8\x50\x25\x32\x3c\x36\xdc\x18\xdb\x0b\x64\x67\x4e\x81\xa9\x43\xfd\x3f\x00\x00\xff\xff\x3e\x71\x6b\x6a\xa2\x12\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 4770, mode: os.FileMode(420), modTime: time.Unix(1535166580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset.go": assetGo,
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset.go": &bintree{assetGo, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

