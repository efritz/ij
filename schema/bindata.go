// Code generated by go-bindata.
// sources:
// asset.go
// config.yaml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xce\x48\xcd\x4d\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\x26\x1f\xf5\x4c\x37\x00\x00\x00")

func assetGoBytes() ([]byte, error) {
	return bindataRead(
		_assetGo,
		"asset.go",
	)
}

func assetGo() (*asset, error) {
	bytes, err := assetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset.go", size: 55, mode: os.FileMode(420), modTime: time.Unix(1534806267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xcd\x92\xa2\x30\x10\xbe\xfb\x14\x54\xed\x56\x79\xa2\xe6\xee\x79\xef\xee\x61\xee\x56\x24\x8d\x64\xcd\x0f\xdb\x09\xae\xbe\xfd\x26\x28\x02\x12\x31\x84\x71\xc6\x1a\x4e\x12\xfa\x2f\x5f\x77\x7f\xe9\x98\xa6\xe9\x62\x41\x21\x67\x92\x19\xa6\xa4\x5e\x2d\x92\x04\xe4\x81\xa1\x92\x02\xa4\x71\xaf\x49\x42\x41\x67\xc8\x4a\x27\xb0\x4a\xde\xd7\xbf\xd6\xf5\xaa\x39\x95\xb0\x4a\x08\x22\x39\xd5\xef\xcc\x80\xd0\x67\x85\xe6\xa3\x36\xc8\xe4\x6e\x61\xd7\x0c\xd1\xfb\x31\x63\x4a\xc2\x3a\x6f\x94\xd3\xe4\x27\x42\xbe\x4a\x96\x3f\xde\x3a\xa1\xbd\x61\x25\xdf\xad\x99\xe5\xb8\xd4\xb6\x62\x9c\x06\xc8\x95\x95\x2e\x02\xc4\x10\x84\x3a\xc0\x59\xd0\x4a\x5e\x62\x78\x8c\x8b\xda\xfe\x81\xcc\xd4\x0b\x25\xaa\x12\xd0\x30\xe8\xa3\x73\xf9\x7d\xcf\xcc\x00\xc5\x66\x11\x64\x25\x5a\x65\x17\xb8\x0d\xea\xf2\x0e\x47\x03\x92\xea\x48\xdb\x4c\x90\x5d\x6c\x5c\x99\x12\x82\x48\x1a\xa9\xad\x0b\xe0\x3c\x56\xb7\x16\x8d\x54\xb6\x35\x8e\xa7\x52\x31\x19\x6b\xa0\xd2\x80\x91\xaa\xff\x14\xee\x75\x49\xb2\x58\xc8\x0b\xa5\x8d\x24\x22\x56\x9d\x82\x21\x59\x11\xae\xbc\x55\x8a\x03\x69\x2a\xad\x00\xc2\x4d\x91\x15\x90\xed\x5b\x13\xde\x0e\xea\x48\x2e\xaf\xa8\xdf\x30\xcc\x5d\xe5\x8e\x64\xa3\x8c\xf0\xb7\x62\x08\x74\xe3\xb5\xf2\x68\x17\x2d\x5f\xb9\xa7\xc7\x59\x77\x70\x82\x63\xa9\xd0\x74\xbd\x6d\x72\xc6\x83\x50\xef\xb1\x9a\x7b\x52\x7f\x4b\xb7\x1f\xfa\xe1\x79\x43\xf4\x86\x49\x28\xad\x11\x23\xfc\x77\xcb\x36\x49\x4e\xb8\x86\x45\x17\xb4\x96\x62\xeb\x66\x77\x94\x36\xc8\x64\x34\xad\xcd\xe3\x00\xdb\x83\x80\x07\x12\x4b\x03\x08\xf6\x0d\x26\x50\x9f\xf3\xb7\x03\x6c\x58\xc4\x10\x9b\x64\xbb\x21\xa6\x62\x37\x60\x98\x00\x55\xc5\x11\xc9\x58\xfe\xac\xc0\xf5\x50\x7b\xad\x83\xa7\x0e\xab\xa1\x13\x95\xed\x01\x43\x3b\xc3\x07\x1f\xd9\x05\x65\xef\xf3\x9a\x2a\x49\x38\xd9\x02\x7f\xb9\xa8\x08\xee\x2a\xc7\x43\x2f\x16\xd8\x74\x0e\x72\x26\x5c\x79\x37\xb3\xd8\x6b\x55\xb7\x8b\xaa\x3b\x19\x7d\x1b\xb8\xdb\x99\xf6\xb5\x00\x3f\xc7\xf5\x2d\x21\x2f\x39\x91\x33\xc1\x3e\xcf\xf6\xb1\xf3\x9a\x3d\xdf\x02\xe1\x0c\x9a\x93\xbc\xc3\x5a\xed\xe3\x03\x66\xbc\x07\x87\x61\xed\x66\x26\x98\x33\xe6\xe6\x2d\xe4\x0a\x61\xd3\x89\x62\xb2\x09\x92\xdb\x51\x67\x96\x05\x77\x9f\xfe\x8c\x6c\x6e\x4c\xe7\x8a\x9c\x29\x99\x55\x88\x93\xe6\xed\x7e\x15\x3e\xa9\x28\xdc\xf7\x61\xef\xb9\x1c\x5f\xeb\x65\x33\xf1\x1f\x08\x0f\xe6\xe9\xb0\xb0\xdc\x33\x2c\x2e\xf7\xf4\x0b\x6c\x1c\xa9\x3b\x39\xbe\x0b\x58\x38\x68\x21\xc0\xf9\xc0\xeb\x02\xd8\xdb\x74\x7f\xb3\xbd\xbf\x1b\xc6\x7a\xf1\xba\xaf\x9b\x3b\x6f\x90\x8e\xd6\x45\xca\xa8\xdd\x13\x6b\x41\x9e\x9b\xc3\x69\xd7\xc0\x41\x16\x42\xd0\x67\xc2\xdd\x1b\xbf\x24\xdc\xe3\xd7\x79\xce\x78\x45\x47\x93\xfb\x2c\xd7\x1d\x46\x0c\x3c\x15\xbc\x8d\x71\x71\xe0\x4d\x70\xc3\x85\xee\x30\x7f\xb2\x2b\xe7\xc2\xb9\x12\x60\xc8\xc7\xba\x1b\x62\x7b\x83\x6c\xe0\x39\x34\x46\x2b\xff\x03\x00\x00\xff\xff\x4c\xd0\x91\xde\x56\x16\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 5718, mode: os.FileMode(420), modTime: time.Unix(1535210695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset.go": assetGo,
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset.go": &bintree{assetGo, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

