// Code generated by go-bindata.
// sources:
// asset.go
// config.yaml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xce\x48\xcd\x4d\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\x26\x1f\xf5\x4c\x37\x00\x00\x00")

func assetGoBytes() ([]byte, error) {
	return bindataRead(
		_assetGo,
		"asset.go",
	)
}

func assetGo() (*asset, error) {
	bytes, err := assetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset.go", size: 55, mode: os.FileMode(420), modTime: time.Unix(1534806267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\x2c\xb5\x52\x4e\x68\xd5\x2b\xe7\x1e\x2b\xa5\x87\xde\x23\xaf\x3d\x80\x1b\x7f\xd0\xb1\xd9\x6e\xfe\x7d\x31\x11\xc4\x14\x13\x88\xd9\xb4\xdc\x6c\x3c\xf3\x3c\xef\x79\x9e\x9d\xe7\x79\x96\x71\x28\x85\x16\x4e\x18\x6d\x8b\x8c\x10\xd0\x6f\x02\x8d\x56\xa0\x9d\x1f\x12\xc2\xc1\x32\x14\x8d\x5f\x50\x90\x1f\xc7\xaf\xc7\x7e\xd6\x5d\x1a\x28\x08\x45\xa4\x97\x7e\x2c\x1c\x28\x7b\x0d\x18\x7e\x5a\x87\x42\x57\x59\x37\xe7\xa8\x3d\xaf\x27\x33\xaf\x3f\x81\xb9\x7e\xa2\x41\xd3\x00\x3a\x01\x63\x4a\x78\x77\xa0\xf9\x38\x5c\xca\x34\x43\xbf\x4e\x09\x45\x2b\x48\x8c\x65\x46\x29\xaa\x79\x62\xb4\xad\x41\xca\xd4\xd8\x7e\x69\x62\x70\xa7\x1f\x5e\x1a\x23\x74\x6a\x82\xd6\x02\x26\x86\xfe\x36\x78\xb6\x0d\x65\xa9\x94\xd7\xc6\x3a\x4d\x55\x6a\x38\x07\x47\x59\xbd\x3d\xf8\xd5\x18\x09\x54\x0f\xe0\x40\xa5\xab\x59\x0d\xec\x7c\x4b\xf1\x19\xa1\x2c\xc8\xe1\xd3\x4b\xd0\x2d\x2f\xc1\xca\xc3\xc8\xfa\x5f\xdd\xb3\x18\x1c\xac\x1c\x82\x11\x7e\xb5\x02\x81\x9f\xa2\x59\xd6\xaa\xb8\xf5\xa2\xff\x26\xfd\xb8\xc0\x13\xbc\x37\x06\x5d\x88\x76\x2a\x85\xdc\xc4\xba\xd1\x70\x2c\xc3\xf4\x79\x0c\x20\xfc\x31\xdd\x5e\x74\x8b\xd1\x6d\x52\xce\x7b\xc6\xa8\xfc\x7e\x33\x05\x52\x52\x69\xc1\x5b\xcb\x4c\xad\x64\x87\xd9\xd7\xe7\x5d\x9f\x01\xbe\xd1\xd4\x56\x47\xe8\x46\xf0\x80\xbd\x79\xbc\x0a\x70\x70\x0a\x47\x3b\x21\xbb\x82\x84\x49\x2d\xc0\x09\x05\xa6\x4d\x33\x8b\x15\x8d\x1a\x49\xf5\x4e\x71\xba\x02\xab\x47\xe8\x59\x69\x86\x68\x47\xf6\x18\x1f\xd0\xc8\x2b\x6c\xf4\x30\x3b\xe9\xd8\x61\x8e\xfe\x2e\xfe\x17\x44\x9e\x3c\xd0\x61\xec\x2d\xcd\x5a\xc4\x87\xfc\x6c\xea\xca\x4f\xd2\xc3\xff\x1f\x6c\x77\xc8\x9b\xf7\xf4\x8e\x52\x9d\xd6\x5e\x2f\x13\x2f\x8c\xfa\x60\x3e\xd7\x34\xae\xeb\x5c\xdb\xfb\x4c\x2d\x68\xbc\x48\xd8\x76\xd2\xb6\x10\x17\x23\x2f\x24\x70\x52\xf4\xb4\xd8\xc9\x73\x6e\x56\x81\x12\xfa\x1b\xe8\xca\xd5\x05\xf9\x12\x7b\x92\x6e\x29\x41\x28\x7f\xb9\x7d\x8c\x6e\x8f\x5d\xad\xd7\x6b\xf5\xff\x20\x33\xd9\xf2\xbb\xe6\xf2\x2c\xe8\xc0\x56\x36\xba\x5a\xf4\x74\x65\x77\xce\xe8\x60\x28\xfe\x3a\x79\x32\x94\x87\x38\x64\xf7\xce\xff\x9f\x00\x00\x00\xff\xff\xdb\x6a\x29\x38\x3b\x0d\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 3387, mode: os.FileMode(420), modTime: time.Unix(1535071401, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset.go": assetGo,
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset.go": &bintree{assetGo, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

