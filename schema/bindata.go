// Code generated by go-bindata.
// sources:
// asset.go
// config.yaml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xce\x48\xcd\x4d\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\x26\x1f\xf5\x4c\x37\x00\x00\x00")

func assetGoBytes() ([]byte, error) {
	return bindataRead(
		_assetGo,
		"asset.go",
	)
}

func assetGo() (*asset, error) {
	bytes, err := assetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset.go", size: 55, mode: os.FileMode(420), modTime: time.Unix(1534806267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\x96\x5a\x29\x27\xb4\xea\x95\x73\x8f\x95\xd2\x43\xef\x91\x17\x4f\xc0\x5d\x3c\xa6\xe3\xc9\xaa\x79\xfb\x62\xaf\x20\x50\x4c\x20\xa6\x69\x6e\x36\x9e\x99\x7c\x7f\x86\x3c\xcf\xb3\x4c\xc1\x59\xa3\x66\x6d\xd1\x15\x99\x10\x80\xef\x9a\x2c\x1a\x40\xf6\x4b\x21\x14\xb8\x92\x74\xeb\x0f\x14\xe2\xc7\xf1\xeb\x31\xec\xf2\xb5\x85\x42\x48\x22\x79\x0d\x6b\xcd\x60\xdc\x47\x41\xff\xd0\x31\x69\xac\xb2\x6e\x8f\xa5\x7b\x5b\x6f\x66\x5f\x7f\x42\xc9\x61\xa3\x25\xdb\x02\xb1\x86\xa1\x25\xfc\x66\x40\x35\x2c\x97\x3a\xcd\xa6\x7f\x6c\x69\x23\x2b\x48\xac\x2d\xad\x31\x12\x55\x62\xb5\xab\xa1\x69\x52\x6b\xc3\xd1\xc4\xe2\x4e\x3f\xba\xb6\x56\x63\x6a\x83\xda\x3a\x46\x69\x52\x69\x53\xc0\xb2\xac\xb7\x17\xbf\x5a\xdb\x80\xc4\x7e\x38\xc8\x86\xeb\xb2\x86\xf2\xed\xd6\xe2\x33\xc1\xb9\x10\x87\x4f\x2f\x23\xcb\xbe\x8c\x4e\x1e\x06\xe8\x7f\x59\x78\xb1\x78\x74\xb2\x2f\x26\xf8\x75\xd1\x04\xea\x14\xed\xb2\x86\xe2\x16\x08\xff\x9b\x84\x22\xca\x93\x54\x2a\xfc\x15\xd9\x7c\xbf\x59\x5e\x9c\x65\xe3\xc0\x07\x67\x46\x43\x72\x7e\xf6\xb9\xb8\x73\x11\xd0\xbb\x4c\x35\x32\x41\xb7\x82\x07\xc2\xeb\xe7\x55\x40\x7d\x0e\x58\x12\x9f\x3a\x40\xda\xa6\x02\x60\x6d\xc0\x5e\xd2\xa2\xb0\xa2\x51\xdb\x48\xdc\x29\x4e\x07\xb0\x7a\x84\x9e\x15\x97\x45\xad\x1e\x66\xfc\x83\x84\xac\xb0\x11\xc6\xec\xa4\x63\xc7\xad\xe3\xdf\x34\xff\x83\xc8\x93\x1f\x74\x18\xb2\x85\xe5\x85\xe8\xa1\x8b\x62\x7a\xdd\x3d\x49\x0f\xff\xbc\xbf\xcf\xfa\xbe\x79\xa0\x77\x90\xea\xb4\xf6\x6e\xb6\x08\xc7\xf3\xad\x38\xc2\x79\x3e\xd7\x34\xae\xeb\x5c\xdb\xfb\x4c\x2d\x68\xbc\x48\xd8\x76\xd2\xb6\x10\x17\x23\x6f\x4c\xe0\x04\xf4\x14\xec\xe4\x63\x65\x86\xc0\x68\xfc\x06\x58\x71\x5d\x88\x2f\xb1\x0f\xae\x2d\x10\x46\x3e\xdf\x18\xb3\x28\xdc\xec\x0e\x69\xbd\xc3\xfd\xfd\xf6\xe4\x51\x7e\xc4\x21\xbb\x27\xc8\x9f\x00\x00\x00\xff\xff\x26\x13\xeb\x8b\xaa\x0a\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 2730, mode: os.FileMode(420), modTime: time.Unix(1534871404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset.go": assetGo,
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset.go": &bintree{assetGo, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

