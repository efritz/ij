// Code generated by go-bindata.
// sources:
// asset.go
// config.yaml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xce\x48\xcd\x4d\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\x26\x1f\xf5\x4c\x37\x00\x00\x00")

func assetGoBytes() ([]byte, error) {
	return bindataRead(
		_assetGo,
		"asset.go",
	)
}

func assetGo() (*asset, error) {
	bytes, err := assetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset.go", size: 55, mode: os.FileMode(420), modTime: time.Unix(1534806267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x3d\x6f\xc2\x30\x10\xdd\xfd\x2b\x2c\xb5\x52\xa6\x08\x75\xcd\xdc\xb1\x12\x1d\xba\x23\x13\x5f\xc0\xad\x7d\x4e\xcf\xa6\x2a\xff\xbe\xd8\x10\x08\xb2\x09\x69\x28\xcd\xe6\xf3\x7d\xbd\xf7\xee\x9c\xb2\x2c\x19\x93\xd0\x28\x54\x5e\x59\x74\x15\xe3\x1c\xf0\x4b\x91\x45\x03\xe8\xc3\x91\x73\x09\xae\x26\xd5\x06\x87\x8a\xbf\xcd\x9f\xe7\xd1\xea\xb7\x2d\x54\x5c\x10\x89\x6d\x3c\x2b\x0f\xc6\xed\x03\xba\x4b\xe7\x49\xe1\x8a\xed\x6c\x5e\xb8\x8f\xeb\xc9\xec\xf2\x1d\x6a\x1f\x0d\x2d\xd9\x16\xc8\x2b\x38\xa6\x54\x46\xac\xa0\x3b\x5c\xca\x93\xd4\xde\x9b\x6a\x6b\x8c\x40\x39\x31\xda\xad\x41\xeb\xa9\xb1\xd1\x75\x62\x70\xa2\x44\xf8\x1e\x09\x9a\x8a\x17\x0f\xb3\x9e\x6c\xb3\x9e\x67\x71\xf0\x24\xf8\xdc\x28\x02\xb9\xc8\x66\xb9\xd6\xc7\x49\xd7\x44\xdb\x6c\xb3\x42\xca\xd8\x8a\xd0\xaf\x27\xe5\x78\x23\xb4\x03\xd6\xef\xa6\x4b\x52\xee\xf5\x0c\xb3\xd1\x6a\x81\x37\xce\x86\xf3\xbb\x5c\xee\xcf\xd0\x65\x29\x8e\x35\x8a\xdb\x95\x19\x62\x8a\x1d\xa0\xdc\x48\x07\x0a\x33\x75\x53\xc2\xa2\xfe\x07\x91\x8b\x50\xa8\x38\xae\x27\xd6\x1b\xa2\x5f\x0d\xe8\xd2\x5a\x0d\x02\xef\xab\x47\xb8\x4f\x27\x37\xd0\x7b\x94\x6a\x71\xed\x69\xb3\x08\xf3\xe6\x14\x9c\xe1\xbc\x4c\x35\xcd\xeb\x9a\x6a\x3b\xcc\xd4\x05\x8d\x2f\x12\x36\x9e\xb4\x31\xc4\xe5\xc8\xeb\x13\x78\x06\xfa\x1c\x2c\x7c\x7b\x40\x79\xc0\x9d\x20\x30\x0a\x5f\x00\x57\x7e\x5d\xf1\xa7\xdc\xff\x6a\x0c\x84\xde\x9c\x8f\x5c\xb3\x2c\x5c\x36\x40\x5a\x37\xe1\xe1\x7d\xbb\x73\xa9\x50\xa2\x60\x43\x82\xfc\x04\x00\x00\xff\xff\x7a\xc6\x58\xaf\xe9\x07\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 2025, mode: os.FileMode(420), modTime: time.Unix(1534792632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset.go": assetGo,
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset.go": &bintree{assetGo, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

