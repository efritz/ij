// Code generated by go-bindata.
// sources:
// asset.go
// config.yaml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xce\x48\xcd\x4d\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\x26\x1f\xf5\x4c\x37\x00\x00\x00")

func assetGoBytes() ([]byte, error) {
	return bindataRead(
		_assetGo,
		"asset.go",
	)
}

func assetGo() (*asset, error) {
	bytes, err := assetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset.go", size: 55, mode: os.FileMode(420), modTime: time.Unix(1534806267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\xc1\x8e\x9b\x30\x10\xbd\xf3\x15\x96\x5a\x29\x27\xb4\xea\x95\x73\x8f\x95\xd2\x43\xef\x91\x17\x4f\xc0\x5d\x3c\xa6\xe3\x61\xb5\xf9\xfb\x62\x22\x08\x14\x07\x88\x69\xda\xdc\x6c\x3c\xf3\x32\xef\xcd\x1b\x3b\x4d\xd3\x24\x51\x70\xd6\xa8\x59\x5b\x74\x59\x22\x04\xe0\xbb\x26\x8b\x06\x90\xfd\x52\x08\x05\x2e\x27\x5d\xfb\x03\x99\xf8\x71\xfc\x7a\xec\x76\xf9\x52\x43\x26\x24\x91\xbc\x74\x6b\xcd\x60\xdc\x35\xa0\xff\xe8\x98\x34\x16\x49\xbb\xc7\xd2\xbd\xad\x27\xb3\xaf\x3f\x21\xe7\x6e\xa3\x26\x5b\x03\xb1\x86\x21\x25\x7c\x30\xa0\x1a\x96\xf7\x32\xcd\xd0\xaf\x5b\xda\xc8\x02\x22\x63\x73\x6b\x8c\x44\x15\x19\xed\x4a\xa8\xaa\xd8\xd8\xee\x68\x64\x70\xab\x1f\x5d\x6a\xab\x31\x36\x41\xe3\x80\x22\x43\x4b\xeb\x18\xa5\x89\x65\x5c\x01\xcb\xbc\xdc\x1e\xfc\x6a\x6d\x05\x12\x7b\x70\x90\x15\x97\x79\x09\xf9\xdb\x2d\xc5\x67\x82\x73\x26\x0e\x9f\x5e\x46\xdd\xfe\x32\x3a\x79\x18\x58\xfb\xa3\xfb\xef\x06\x8f\x4e\xf6\xc1\x04\xbf\x1a\x4d\xa0\x4e\xc1\x2c\x6b\x55\xdc\xbc\xe4\x7f\x13\x3f\x05\x79\x92\x4a\x75\x7f\x45\x56\xdf\x6f\x6e\x11\x67\x59\x39\xf0\x9e\x9b\xd1\x10\x6d\xbd\x7d\x06\x68\x1b\x10\xe8\x5d\xc6\x7a\x80\xa0\x5d\xc1\x03\xbe\xf7\x78\x05\x50\x6f\x21\x96\xc4\xa7\xb6\x20\x6d\x63\x0b\x60\x6d\xc0\x36\x71\x2e\x5a\xd1\xa8\xae\x24\xee\x14\xa7\x2d\xb0\x78\x84\x9e\x95\x2e\x0b\xb6\x7a\x87\xf1\x17\x1c\xb2\xc2\x46\x07\xb3\x93\x8e\x1d\x53\xc7\x5f\x52\xff\x82\xc8\x93\x07\x3a\x0c\xde\xc2\xbc\x21\x7a\x68\x50\x4c\xc7\xdd\x93\xf4\xf0\xdf\xfb\x79\xd6\xe7\x4d\x3b\x7a\x07\xa9\x4e\x6b\xd7\xba\x45\x38\x9e\x6f\xc1\x01\xce\xd3\xb9\xa6\x61\x5d\xe7\xda\x2e\x33\x75\x47\xe3\xbb\x84\x6d\x27\x6d\x0b\x71\x21\xf2\xc6\x04\x4e\x8a\x9e\x16\x3b\x79\xe7\xcc\x2a\x30\x1a\xbf\x01\x16\x5c\x66\xe2\x4b\xe8\xad\xb6\xa5\x04\x6d\x6a\x4b\x8b\x6f\xbb\xed\xba\x3d\x76\x67\xc1\xc7\xff\x43\xce\xab\x46\x2d\x0e\x97\x67\x41\x8f\xc6\xca\xc6\xa9\x16\xec\xae\x64\xa1\x47\xfb\x81\xe2\xaf\x93\x27\x43\x79\x88\x43\xb2\xd4\xff\xbf\x03\x00\x00\xff\xff\xf6\xed\xd4\x08\x54\x0c\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 3156, mode: os.FileMode(420), modTime: time.Unix(1534991814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset.go": assetGo,
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset.go": &bintree{assetGo, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

