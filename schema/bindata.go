// Code generated by go-bindata.
// sources:
// asset.go
// config.yaml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xce\x48\xcd\x4d\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\x26\x1f\xf5\x4c\x37\x00\x00\x00")

func assetGoBytes() ([]byte, error) {
	return bindataRead(
		_assetGo,
		"asset.go",
	)
}

func assetGo() (*asset, error) {
	bytes, err := assetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset.go", size: 55, mode: os.FileMode(420), modTime: time.Unix(1534806267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\xcb\xb2\xdb\x20\x0c\xdd\xfb\x2b\x3c\xd3\xce\x64\xe5\xb9\xfb\xac\xbb\x4f\x17\xdd\x7b\x08\xc8\x31\x0d\x0f\x57\xe0\xdb\xe4\xef\x0b\xce\xd8\xc1\xf1\x9b\x24\xbd\xde\x81\x91\x0e\x3a\x92\x0e\xca\xb2\x2c\x49\x18\x14\x5c\x71\xcb\xb5\x32\xfb\x24\x4d\x41\x7d\x72\xd4\x4a\x82\xb2\x7e\x99\xa6\x0c\x0c\x45\x5e\xf9\x03\xfb\xf4\xd7\xe1\xc7\xa1\xd9\xb5\xd7\x0a\xf6\x29\x41\x24\xd7\x66\xcd\x2d\x48\x73\x33\x68\x7f\x1a\x8b\x5c\x9d\x12\xb7\x67\x89\x39\x2f\x3b\xd3\xc7\xdf\x40\x6d\xb3\x51\xa1\xae\x00\x2d\x87\xce\x25\x5c\x2c\x28\xd6\x2d\xa7\x3c\x0d\xd0\x6f\x5b\x5c\x92\x13\x44\xda\x52\x2d\x25\x51\x2c\xd2\xda\x94\x20\x44\xac\x6d\x73\x34\xd2\xd8\xe5\x0f\xaf\x95\xe6\x2a\xd6\x41\x6d\x00\x23\x4d\xff\x6a\x3c\x9b\x8a\xd0\x58\xca\x4b\x6d\xac\x22\x32\xd6\x9c\x81\x25\xb4\x5c\x6f\x7c\xd4\x5a\x00\x51\x2d\x38\x10\x61\x4b\x5a\x02\x3d\xdf\x5d\x7c\x47\x28\xf6\xe9\xee\xdb\x47\xd0\x2d\x1f\xc1\xc9\x5d\xc7\xfa\x43\xf7\x4c\x1a\x07\x27\x5b\x63\x84\x3f\x35\x47\x60\xf9\xa8\x97\xa5\x28\xee\xbd\xe8\xbf\x5e\x3f\x4e\xf0\x04\x97\x4a\xa3\x0d\xd1\xf2\x82\x8b\x55\xac\x6b\x05\x87\x22\x74\x9f\x8d\x01\x84\x3f\xfa\xd7\x1b\xbd\xe2\xe8\x35\x09\x63\x0d\x63\x44\xfc\xbc\x8b\x42\x5a\x10\x61\xc0\x4b\xcb\x20\x5b\xd1\x0a\xf3\x5c\x9f\xbb\x3e\x03\xfc\x24\xb1\xad\x8e\xe0\x56\xb0\x41\xde\x3c\xde\x09\xb0\x55\x0a\x4b\x5c\x22\x5d\x40\x5c\xc7\x06\x60\xb9\x04\x5d\xc7\x89\xc5\x42\x8e\x2a\x41\xd4\x4b\xe4\x3f\xb6\xa5\x1d\x3d\xa7\x2d\xe4\x2e\xb4\xd2\x68\x3f\x37\x18\x2f\x90\x81\x05\x2e\x1b\x98\x27\xc9\x7c\x42\x5a\x8f\x50\x68\x84\x3c\xb8\xc5\x66\x17\xa4\x70\x9d\xf2\x94\x07\x3f\x4e\xfc\x8f\x6c\xe6\x1e\x68\xd7\xc9\x83\xa2\x35\xe2\x26\x49\xee\x57\xe1\x9b\x8a\xc2\xff\x6f\x5f\x8e\xd6\x6f\xd6\xe4\xb8\xab\x97\x7c\x69\x00\xeb\xc9\xf9\xa8\x94\x67\xc3\xc2\xf2\xdf\xb0\xb8\xfc\xd7\x2f\xb0\x79\xa6\x26\x72\x3c\x49\xd8\x7a\xd2\xd6\x10\x37\x46\x5e\x48\x60\x2f\xe8\x7e\xb0\xbd\x89\x74\xae\x17\xbb\xb8\x1e\xc6\xa2\x55\x36\x03\x0e\xd6\xc4\xce\xa5\x7f\xd8\x5f\x93\xf0\x6d\x63\xc5\x6d\xa4\xf8\x1a\x64\x2a\x6a\x36\x4b\xed\xbb\xa0\x03\x3d\x5a\xa9\xc9\xa3\x65\x99\xcc\x14\x77\xab\x44\xfe\x29\x7d\x33\x94\x87\xf0\x50\xd2\x4d\xd1\xaf\x85\x1b\x72\xfb\xc0\xec\xca\x57\x60\xae\xa9\xff\x05\x00\x00\xff\xff\xe4\xfb\x76\x65\xd3\x0e\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 3795, mode: os.FileMode(420), modTime: time.Unix(1535083652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset.go": assetGo,
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset.go": &bintree{assetGo, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

