// Code generated by go-bindata.
// sources:
// asset.go
// config.yaml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xce\x48\xcd\x4d\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\x26\x1f\xf5\x4c\x37\x00\x00\x00")

func assetGoBytes() ([]byte, error) {
	return bindataRead(
		_assetGo,
		"asset.go",
	)
}

func assetGo() (*asset, error) {
	bytes, err := assetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset.go", size: 55, mode: os.FileMode(420), modTime: time.Unix(1534806267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\xc1\x8e\x9b\x30\x10\xbd\xf3\x15\x96\x5a\x29\x27\xb4\xea\x95\x73\x8f\x95\xd2\x43\xef\x91\xd7\x9e\x80\x1b\x3c\xa6\xe3\x61\xbb\xf9\xfb\x62\x22\x08\x14\x02\xc4\x69\xba\xb9\xd9\xf8\xcd\x64\xde\x9b\x37\x76\x9a\xa6\x49\xa2\xe1\x68\xd0\xb0\x71\xe8\xb3\x44\x08\xc0\x37\x43\x0e\x2d\x20\x87\xa5\x10\x1a\xbc\x22\x53\x85\x03\x99\xf8\xb1\xff\xba\x6f\x77\xf9\x5c\x41\x26\x24\x91\x3c\xb7\x6b\xc3\x60\xfd\x05\xd0\x7d\xf4\x4c\x06\xf3\xa4\xd9\x63\xe9\x4f\xeb\xc1\xdc\xeb\x4f\x50\xdc\x6e\x54\xe4\x2a\x20\x36\xd0\x87\x84\x77\x06\xd4\xfd\xf2\x56\xa4\x49\xf6\xcb\x96\xb1\x32\x87\x48\xac\x72\xd6\x4a\xd4\x91\x68\x5f\x40\x59\xc6\x62\xdb\xa3\x91\xe0\x46\x3f\x3a\x57\xce\x60\x6c\x80\xda\x03\x45\x42\x7f\x3b\x3a\xf9\x4a\xaa\x58\xca\x0b\xe7\x19\xa5\x8d\x85\x6b\x60\xa9\x8a\xed\xe0\x57\xe7\x4a\x90\xd8\x25\x07\x59\x72\xa1\x0a\x50\xa7\x6b\x88\xcf\x04\xc7\x4c\xec\x3e\xbd\x0c\xdc\xf2\x32\x38\xb9\xeb\x59\xff\xcb\x3d\x37\xc1\x83\x93\x1d\x98\xe0\x57\x6d\x08\xf4\x61\x36\xca\x5a\x15\x57\x2f\x86\xdf\xc8\x8f\xb3\x3c\x49\xad\xdb\xbf\x22\xcb\xef\x57\xb7\x89\xa3\x2c\x3d\x04\xcf\x4e\x68\x88\xb6\xee\x63\x06\x6a\x1a\x18\xe8\x4d\xc6\x7a\x88\xa0\x59\xc1\x1d\x73\x23\xe4\xcb\x81\x3a\x0b\xb2\x24\x3e\x34\x05\x19\x17\x5b\x00\x1b\x0b\xae\x8e\x73\xe1\x8a\x46\x55\x29\xf1\x41\x71\x9a\x02\xf3\x7b\xe8\x59\xe9\xb2\xd9\x56\x6f\x73\xfc\x03\x87\xac\xb0\xd1\xa6\x79\x90\x8e\x07\xa6\x4e\xb8\xe4\xfe\x07\x91\x87\x90\x68\xd7\x7b\x0b\x55\x4d\x74\xd7\xa0\x18\x8f\xbb\x27\xe9\x11\xbe\x77\xf3\xac\x8b\x9b\xb6\xf4\xf6\x52\x1d\xd6\x9e\x05\x0e\x61\x7f\xbc\x82\x67\x38\x4f\xa7\x9a\xce\xeb\x3a\xd5\x76\x99\xa9\x1b\x1a\xdf\x24\x6c\x3b\x69\x5b\x88\x9b\x23\x6f\x48\xe0\xa8\xe8\x71\xb1\xa3\x77\xd2\xa4\x02\x6b\xf0\x1b\x60\xce\x45\x26\xbe\xcc\xbd\xf5\xb6\x94\x60\x6c\xe5\x68\xf1\x6d\xb8\x5d\xb7\xfb\xee\x2c\x78\xff\xb8\xcc\xaa\xac\xf5\xe2\x70\x79\x56\xea\xc1\x58\xd9\x38\xd5\x66\xbb\x2b\x59\xe8\xd1\x6e\xa0\x84\xeb\xe4\xc9\xa9\x42\x8a\x5d\xb2\xd4\xff\x7f\x02\x00\x00\xff\xff\xaa\xb5\xd1\xd4\x94\x0c\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 3220, mode: os.FileMode(420), modTime: time.Unix(1535066758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset.go": assetGo,
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset.go": &bintree{assetGo, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

